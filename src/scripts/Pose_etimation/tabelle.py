qrcode_tf  =  [[[-1.0, 		0.0, 		    0.0, 		4.48],
				[0.0, 		0.0, 			1.0, 		0],
				[0.0, 	    1.0, 			0.0, 		0.23], #1
				[0.0, 	    0.0, 			0.0, 		1.0]],
				
				[[-1.0, 	0.0, 			0.0, 		8.99],
				[0.0, 		0.0, 			1.0, 		0],
				[0.0, 	    1.0, 			0.0, 		0.0], #2
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[-1.0, 	0.0, 			0.0, 		10.93],
				[0.0, 		0.0, 			1.0, 		0],
				[0.0, 	    1.0, 			0.0, 		0.23],#3
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[0.0, 		0.0, 		   -1.0, 		5.42],
				[-1.0, 		0.0, 			0.0, 		3.70],
				[0.0, 	    1.0, 			0.0, 		0.0], #4
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		2.30],
				[0.0, 		0.0, 			1.0, 		0],
				[0.0, 	   -1.0, 			0.0, 		0.23],#5
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[-1.0, 	0.0, 			0.0, 		6.77],
				[0.0, 		0.0, 			1.0, 		0.635],
				[0.0, 	    1.0, 			0.0, 		0.23],#6
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		0.71],
				[0.0, 		0.0, 			1.0, 		1.34],
				[0.0, 	   -1.0, 			0.0, 		0.0],#7
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		3.43],
				[0.0, 		0.0, 			1.0, 		4.26],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		5.38],
				[0.0, 		0.0, 			1.0, 		4.26],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		8.56],
				[0.0, 		0.0, 			1.0, 		5.16],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],

				[[1.0, 		0.0, 			0.0, 		1.46],
				[0.0, 		0.0, 			1.0, 		1.22],
				[0.0, 	   -1.0, 			0.0, 		0.0],
				[0.0, 		0.0, 			0.0, 		1.0]],
				
				[[-1.0, 	0.0, 			0.0, 		10],
				[0.0, 		0.0, 			1.0, 		0],
				[0.0, 	    1.0, 			0.0, 		0.23],
				[0.0, 		0.0, 			0.0, 		1.0]]]




if(code1):
		#if(code2):
		#	tf = (tf_1 + tf_2)/2
		if(code3):
			tf = (tf_1 + tf_3)/2
		else:
			tf = tf_1

	#elif(code2):
	#	if(code1):
	#		tf = (tf_1 + tf_2)/2
	#	elif(code3):
	#		tf = (tf_2 + tf_3)/2
	#	else:
	#		tf = tf_2
	elif(code3):
		if(code1):
			tf = (tf_1 + tf_3)/2
		#elif(code2):
		#	tf = (tf_2 + tf_3)/2
		else:
			tf = tf_3

	if(code1 or code3):	
		pose_o.pose.position.x = tf[0][3] 
		pose_o.pose.position.y = tf[1][3]
		pose_o.pose.position.z = 0
		pose_a.X = tf[0][3]
		pose_a.Y = tf[1][3]
		M1 = tf[0:3, 0:3]

		eulerW = funktionen.eulerAnglesToRotationMatrix(M1)			
		pose_a.Z = eulerW[2]*(180/pi)
		# Quaternion
		if((float(1)+M1[0,0]+M1[1,1]+M1[2,2]) > 0 ):
			r = np.math.sqrt(float(1)+M1[0,0]+M1[1,1]+M1[2,2])*0.5
			i = (M1[2,1]-M1[1,2])/(4*r)
			j = (M1[0,2]-M1[2,0])/(4*r)
			k = (M1[1,0]-M1[0,1])/(4*r)
			pose_o.pose.orientation.x = r
			pose_o.pose.orientation.y = i
			pose_o.pose.orientation.z = k
			pose_o.pose.orientation.w = j
			
		pub.publish(pose_o)
		puba.publish(pose_a)
		pubm.publish(empty_message)